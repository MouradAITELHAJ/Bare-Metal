
interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000450  08000458  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000450  08000450  00001458  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00001458  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000458  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00001450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00001458  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000916  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001d3  00000000  00000000  00001d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00001f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136c6  00000000  00000000  00002025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000691  00000000  00000000  000156eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007024b  00000000  00000000  00015d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00085fc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e4  00000000  00000000  0008600c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000860f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000438 	.word	0x08000438

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08000438 	.word	0x08000438

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	@ (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
#include "interrupts.h"




int main(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
    GPIO_CONFIG();
 8000258:	f000 f806 	bl	8000268 <GPIO_CONFIG>
    EXTI_CONFIG();
 800025c:	f000 f834 	bl	80002c8 <EXTI_CONFIG>
 8000260:	2300      	movs	r3, #0


}
 8000262:	4618      	mov	r0, r3
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <GPIO_CONFIG>:


void GPIO_CONFIG(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and GPIOC(linked to AHB2 bus)
    RCC->AHB2ENR |= (GPIOAENB | GPIOCENB);
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <GPIO_CONFIG+0x58>)
 800026e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000270:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <GPIO_CONFIG+0x58>)
 8000272:	f043 0305 	orr.w	r3, r3, #5
 8000276:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Configure PA5 as output
    GPIOA->MODER &= ~(3U << 10); // Clear MODER5[1:0]
 8000278:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000282:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000286:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1U << 10);  // Set MODER5[1:0] to 01 (output mode)
 8000288:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000296:	6013      	str	r3, [r2, #0]

//Configure PC13 as an input
    GPIOC->MODER &= ~(3U<<26);
 8000298:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <GPIO_CONFIG+0x5c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a09      	ldr	r2, [pc, #36]	@ (80002c4 <GPIO_CONFIG+0x5c>)
 800029e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002a2:	6013      	str	r3, [r2, #0]

    // Initialize PA5 output to low
    GPIOA->ODR &= ~LED_PIN;
 80002a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ae:	f023 0320 	bic.w	r3, r3, #32
 80002b2:	6153      	str	r3, [r2, #20]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	48000800 	.word	0x48000800

080002c8 <EXTI_CONFIG>:

void EXTI_CONFIG(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	//Enable clk access for SYSCFG (APB2)
	RCC->APB2ENR |= SYSCFGEN;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <EXTI_CONFIG+0x40>)
 80002ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <EXTI_CONFIG+0x40>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6613      	str	r3, [r2, #96]	@ 0x60
	//Select the source interrupt (PC13)
	SYSCFG->EXTICR[3] |= EXTI_PC13;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <EXTI_CONFIG+0x44>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a0b      	ldr	r2, [pc, #44]	@ (800030c <EXTI_CONFIG+0x44>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6153      	str	r3, [r2, #20]
	//unmask the interrupt for bit 13
	//enable interrupt for PIN13
	EXTI->IMR1 |= (1U<<13);
 80002e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <EXTI_CONFIG+0x48>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a09      	ldr	r2, [pc, #36]	@ (8000310 <EXTI_CONFIG+0x48>)
 80002ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ee:	6013      	str	r3, [r2, #0]
	//select falling trigger
	EXTI->FTSR1 |= (1U<<13);
 80002f0:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <EXTI_CONFIG+0x48>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4a06      	ldr	r2, [pc, #24]	@ (8000310 <EXTI_CONFIG+0x48>)
 80002f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002fa:	60d3      	str	r3, [r2, #12]
	//Enable NVIC for EXTI13
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002fc:	2028      	movs	r0, #40	@ 0x28
 80002fe:	f7ff ff8b 	bl	8000218 <__NVIC_EnableIRQ>

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000
 800030c:	40010000 	.word	0x40010000
 8000310:	40010400 	.word	0x40010400

08000314 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
	if((EXTI->PR1 & BUTTON)){
 800031a:	4b1e      	ldr	r3, [pc, #120]	@ (8000394 <EXTI15_10_IRQHandler+0x80>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000322:	2b00      	cmp	r3, #0
 8000324:	d030      	beq.n	8000388 <EXTI15_10_IRQHandler+0x74>
		EXTI->PR1=(1U<<13);
 8000326:	4b1b      	ldr	r3, [pc, #108]	@ (8000394 <EXTI15_10_IRQHandler+0x80>)
 8000328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800032c:	615a      	str	r2, [r3, #20]
		for(int i=0; i<4 ;i++){
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e026      	b.n	8000382 <EXTI15_10_IRQHandler+0x6e>
		    GPIOA->ODR |= LED_PIN;
 8000334:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6153      	str	r3, [r2, #20]
		    for(int j=0; j<1600000 ;j++){}
 8000344:	2300      	movs	r3, #0
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	e002      	b.n	8000350 <EXTI15_10_IRQHandler+0x3c>
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	3301      	adds	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <EXTI15_10_IRQHandler+0x84>)
 8000354:	4293      	cmp	r3, r2
 8000356:	ddf8      	ble.n	800034a <EXTI15_10_IRQHandler+0x36>
		    GPIOA->ODR &= ~LED_PIN;
 8000358:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000362:	f023 0320 	bic.w	r3, r3, #32
 8000366:	6153      	str	r3, [r2, #20]
		   	for(int j=0; j<1600000 ;j++){}
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	e002      	b.n	8000374 <EXTI15_10_IRQHandler+0x60>
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3301      	adds	r3, #1
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <EXTI15_10_IRQHandler+0x84>)
 8000378:	4293      	cmp	r3, r2
 800037a:	ddf8      	ble.n	800036e <EXTI15_10_IRQHandler+0x5a>
		for(int i=0; i<4 ;i++){
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b03      	cmp	r3, #3
 8000386:	ddd5      	ble.n	8000334 <EXTI15_10_IRQHandler+0x20>
		}
	}

}
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40010400 	.word	0x40010400
 8000398:	001869ff 	.word	0x001869ff

0800039c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800039c:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	@ (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	@ (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ca:	f000 f811 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff ff41 	bl	8000254 <main>

080003d2 <LoopForever>:

LoopForever:
  b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   r0, =_estack
 80003d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e8:	2000001c 	.word	0x2000001c

080003ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC1_2_IRQHandler>
	...

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	@ (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	@ (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	@ (8000434 <__libc_init_array+0x44>)
 8000404:	f000 f818 	bl	8000438 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000450 	.word	0x08000450
 800042c:	08000450 	.word	0x08000450
 8000430:	08000450 	.word	0x08000450
 8000434:	08000454 	.word	0x08000454

08000438 <_init>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

08000444 <_fini>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr
