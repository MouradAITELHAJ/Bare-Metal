
6.UART_TX_TST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003dc  000013dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  000013dc  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  000013dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003dc  000013dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000013d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003d8  080003d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000013dc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000470  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000013c  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000019b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003e  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136bf  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000631  00000000  00000000  00015115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006fd70  00000000  00000000  00015746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000854b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c4  00000000  00000000  000854fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000855c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080003bc 	.word	0x080003bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080003bc 	.word	0x080003bc

08000218 <main>:

void GPIOA_CONFIG(void);
void UART2_CONFIG(void);
void Write_char(char ch);

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
    GPIOA_CONFIG();
 800021e:	f000 f811 	bl	8000244 <GPIOA_CONFIG>
    UART2_CONFIG();
 8000222:	f000 f83f 	bl	80002a4 <UART2_CONFIG>

    while (1) {
        Write_char('Y');
 8000226:	2059      	movs	r0, #89	@ 0x59
 8000228:	f000 f862 	bl	80002f0 <Write_char>

        // Optional: Add a delay to prevent flooding the receiver
        for (volatile uint32_t i = 0; i < 1000; i++) {
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e002      	b.n	8000238 <main+0x20>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	3301      	adds	r3, #1
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800023e:	d3f8      	bcc.n	8000232 <main+0x1a>
        Write_char('Y');
 8000240:	e7f1      	b.n	8000226 <main+0xe>
	...

08000244 <GPIOA_CONFIG>:
            // Simple delay loop
        }
    }
}

void GPIOA_CONFIG(void) {
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB2ENR |= GPIOAEN;
 8000248:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <GPIOA_CONFIG+0x5c>)
 800024a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800024c:	4a14      	ldr	r2, [pc, #80]	@ (80002a0 <GPIOA_CONFIG+0x5c>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Set PA2 to Alternate Function mode (AF7 for USART2_TX)
    GPIOA->MODER &= ~(3U << (2 * 2)); // Clear mode bits for PA2
 8000254:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800025e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000262:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << (2 * 2));  // Set mode to Alternate Function
 8000264:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6013      	str	r3, [r2, #0]

    // Set PA2 to AF7 (USART2_TX)
    GPIOA->AFR[0] &= ~(0xFU << (4 * 2)); // Clear AF bits for PA2
 8000274:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000278:	6a1b      	ldr	r3, [r3, #32]
 800027a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800027e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000282:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (AF7 << (4 * 2));   // Set AF7 for PA2
 8000284:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000288:	6a1b      	ldr	r3, [r3, #32]
 800028a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800028e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000292:	6213      	str	r3, [r2, #32]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000

080002a4 <UART2_CONFIG>:

void UART2_CONFIG(void) {
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
    // Enable clock for USART2
    RCC->APB1ENR1 |= UART2EN;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <UART2_CONFIG+0x44>)
 80002aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002ac:	4a0e      	ldr	r2, [pc, #56]	@ (80002e8 <UART2_CONFIG+0x44>)
 80002ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002b2:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure baud rate
    USART2->BRR = APB1CLK / BAUDRATE;
 80002b4:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <UART2_CONFIG+0x48>)
 80002b6:	2245      	movs	r2, #69	@ 0x45
 80002b8:	60da      	str	r2, [r3, #12]

    // Set data length to 8 bits (default), no parity, 1 stop bit
    USART2->CR1 &= ~((1U << 12) | (1U << 28)); // Clear M0 and M1 for 8-bit word length
 80002ba:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <UART2_CONFIG+0x48>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a0b      	ldr	r2, [pc, #44]	@ (80002ec <UART2_CONFIG+0x48>)
 80002c0:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80002c4:	6013      	str	r3, [r2, #0]

    // Enable transmitter
    USART2->CR1 |= TE;
 80002c6:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <UART2_CONFIG+0x48>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a08      	ldr	r2, [pc, #32]	@ (80002ec <UART2_CONFIG+0x48>)
 80002cc:	f043 0308 	orr.w	r3, r3, #8
 80002d0:	6013      	str	r3, [r2, #0]

    // Enable USART
    USART2->CR1 |= UE;
 80002d2:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <UART2_CONFIG+0x48>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a05      	ldr	r2, [pc, #20]	@ (80002ec <UART2_CONFIG+0x48>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6013      	str	r3, [r2, #0]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40004400 	.word	0x40004400

080002f0 <Write_char>:

void Write_char(char ch) {
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
    // Wait until transmit data register is empty
    while (!(USART2->ISR & TXE)) {
 80002fa:	bf00      	nop
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <Write_char+0x2c>)
 80002fe:	69db      	ldr	r3, [r3, #28]
 8000300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <Write_char+0xc>
        // Wait
    }
    // Transmit character
    USART2->TDR = ch;
 8000308:	4a04      	ldr	r2, [pc, #16]	@ (800031c <Write_char+0x2c>)
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40004400 	.word	0x40004400

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	@ (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	@ (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	@ (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	@ (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	@ (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	@ (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 f811 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ff61 	bl	8000218 <main>

08000356 <LoopForever>:

LoopForever:
  b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000364:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000368:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800036c:	2000001c 	.word	0x2000001c

08000370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC1_2_IRQHandler>
	...

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	4d0d      	ldr	r5, [pc, #52]	@ (80003ac <__libc_init_array+0x38>)
 8000378:	4c0d      	ldr	r4, [pc, #52]	@ (80003b0 <__libc_init_array+0x3c>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	2600      	movs	r6, #0
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	4d0b      	ldr	r5, [pc, #44]	@ (80003b4 <__libc_init_array+0x40>)
 8000386:	4c0c      	ldr	r4, [pc, #48]	@ (80003b8 <__libc_init_array+0x44>)
 8000388:	f000 f818 	bl	80003bc <_init>
 800038c:	1b64      	subs	r4, r4, r5
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	2600      	movs	r6, #0
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	4798      	blx	r3
 800039e:	3601      	adds	r6, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	4798      	blx	r3
 80003a8:	3601      	adds	r6, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
