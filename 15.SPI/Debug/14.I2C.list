
14.I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000013f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000013f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000013f4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000499  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000160  00000000  00000000  000018bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00001a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000039  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001369f  00000000  00000000  00001ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000678  00000000  00000000  00015150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006fd93  00000000  00000000  000157c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008555b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a0  00000000  00000000  000855a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00085640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080003d4 	.word	0x080003d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080003d4 	.word	0x080003d4

08000218 <main>:


/*we will use the I2C1 it means the SDA is connected to PA14 and SCL to PA13
 * */

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

   I2C_INIT();
 800021c:	f000 f804 	bl	8000228 <I2C_INIT>
 8000220:	2300      	movs	r3, #0


}
 8000222:	4618      	mov	r0, r3
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <I2C_INIT>:

void I2C_INIT(void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

	//Enable clock for GPIOA
	RCC->AHB2ENR |= (0x1<<0);
 800022c:	4b3f      	ldr	r3, [pc, #252]	@ (800032c <I2C_INIT+0x104>)
 800022e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000230:	4a3e      	ldr	r2, [pc, #248]	@ (800032c <I2C_INIT+0x104>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Enable clock for I2C1
	RCC->APB1ENR1 |= (0x1<<21);
 8000238:	4b3c      	ldr	r3, [pc, #240]	@ (800032c <I2C_INIT+0x104>)
 800023a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800023c:	4a3b      	ldr	r2, [pc, #236]	@ (800032c <I2C_INIT+0x104>)
 800023e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000242:	6593      	str	r3, [r2, #88]	@ 0x58
	//disable I2C before configuration
	I2C1->CR1 &=~(0x1);
 8000244:	4b3a      	ldr	r3, [pc, #232]	@ (8000330 <I2C_INIT+0x108>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a39      	ldr	r2, [pc, #228]	@ (8000330 <I2C_INIT+0x108>)
 800024a:	f023 0301 	bic.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]
	//Configure PA13 and PA14 as an alternate function
	GPIOA->MODER &= ~(0x1<<26);
 8000250:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800025a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800025e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x1<<27);
 8000260:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800026a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800026e:	6013      	str	r3, [r2, #0]

	GPIOA->MODER &= ~(0x1<<28);
 8000270:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800027a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800027e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0x1<<29);
 8000280:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800028a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800028e:	6013      	str	r3, [r2, #0]

	//Configure PA13 and PA14 as open drain
	GPIOA->OTYPER |= (0x3<<13);
 8000290:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800029a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800029e:	6053      	str	r3, [r2, #4]

	//Configure the pin 13 and PA14 as pull up
	GPIOA->PUPDR &= ~(0xF<<13);
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002aa:	f423 33f0 	bic.w	r3, r3, #122880	@ 0x1e000
 80002ae:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (0x5<<13);
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ba:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80002be:	60d3      	str	r3, [r2, #12]

	// Set the alternate functions as PA4
	GPIOA->AFR[1] &= ~(0xFF<<20);
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ca:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 80002ce:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (0x4<<20); //for PIN13
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002de:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (0x4<<24); //for PA14
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002ee:	6253      	str	r3, [r2, #36]	@ 0x24

	//Reset the i2c
	RCC->APB1RSTR1 &= ~(0x1<<21);
 80002f0:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <I2C_INIT+0x104>)
 80002f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <I2C_INIT+0x104>)
 80002f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80002fa:	6393      	str	r3, [r2, #56]	@ 0x38
	RCC->APB1RSTR1 |=  (0x1<<21);
 80002fc:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <I2C_INIT+0x104>)
 80002fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000300:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <I2C_INIT+0x104>)
 8000302:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000306:	6393      	str	r3, [r2, #56]	@ 0x38

	/*determine the speed of I2C (standard mode)
	Refer to RM I2C timing register configuration examples for 100 kHz
	*/
	I2C1->TIMINGR |= (0x3<<28) | (0x4<<20) | (0x2<<16) | (0x0F<<8) | (0x04<<0);
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <I2C_INIT+0x108>)
 800030a:	691a      	ldr	r2, [r3, #16]
 800030c:	4908      	ldr	r1, [pc, #32]	@ (8000330 <I2C_INIT+0x108>)
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <I2C_INIT+0x10c>)
 8000310:	4313      	orrs	r3, r2
 8000312:	610b      	str	r3, [r1, #16]

	//Enable the I2C
	I2C1->CR1 |= (0x1);
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <I2C_INIT+0x108>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a05      	ldr	r2, [pc, #20]	@ (8000330 <I2C_INIT+0x108>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	40005400 	.word	0x40005400
 8000334:	30420f04 	.word	0x30420f04

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	@ (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	@ (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	@ (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	@ (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ff55 	bl	8000218 <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	2000001c 	.word	0x2000001c

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4d0d      	ldr	r5, [pc, #52]	@ (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	@ (80003c8 <__libc_init_array+0x3c>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2600      	movs	r6, #0
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4d0b      	ldr	r5, [pc, #44]	@ (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	@ (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2600      	movs	r6, #0
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
