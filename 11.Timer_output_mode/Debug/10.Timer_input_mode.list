
10.Timer_input_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000013d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000013d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000013c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003cc  080003cc  000013cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000013d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000051b  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000127  00000000  00000000  0000191b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00001a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000039  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136ba  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000614  00000000  00000000  00015193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006fd79  00000000  00000000  000157a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00085520  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000098  00000000  00000000  00085564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  000855fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080003b0 	.word	0x080003b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080003b0 	.word	0x080003b0

08000218 <main>:
#include "timer.h"

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    GPIOA_CONFIG();
 800021c:	f000 f804 	bl	8000228 <GPIOA_CONFIG>
    TIMER2_CONFIG();
 8000220:	f000 f832 	bl	8000288 <TIMER2_CONFIG>

    while (1) {
 8000224:	bf00      	nop
 8000226:	e7fd      	b.n	8000224 <main+0xc>

08000228 <GPIOA_CONFIG>:
        // Main loop can be used for other tasks
    }
}

void GPIOA_CONFIG(void) {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB2ENR |= GPIOAEN;
 800022c:	4b15      	ldr	r3, [pc, #84]	@ (8000284 <GPIOA_CONFIG+0x5c>)
 800022e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000230:	4a14      	ldr	r2, [pc, #80]	@ (8000284 <GPIOA_CONFIG+0x5c>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Set PA5 to alternate function mode (AF1 for TIM2_CH1)
    GPIOA->MODER &= ~(3U << (5 * 2)); // Clear mode bits for PA5
 8000238:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000242:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000246:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << (5 * 2));  // Set mode to Alternate Function
 8000248:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000252:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000256:	6013      	str	r3, [r2, #0]

    // Set PA5 alternate function to AF1 (TIM2_CH1)
    GPIOA->AFR[0] &= ~(0xF << (5 * 4)); // Clear AF bits for PA5
 8000258:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800025c:	6a1b      	ldr	r3, [r3, #32]
 800025e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000262:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000266:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U << (5 * 4));   // Set AF1 for PA5
 8000268:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800026c:	6a1b      	ldr	r3, [r3, #32]
 800026e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000276:	6213      	str	r3, [r2, #32]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000

08000288 <TIMER2_CONFIG>:

void TIMER2_CONFIG(void) {
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
    // Enable clock for TIM2
    RCC->APB1ENR1 |= TIM2EN;
 800028c:	4b20      	ldr	r3, [pc, #128]	@ (8000310 <TIMER2_CONFIG+0x88>)
 800028e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000290:	4a1f      	ldr	r2, [pc, #124]	@ (8000310 <TIMER2_CONFIG+0x88>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6593      	str	r3, [r2, #88]	@ 0x58

    // Disable TIM2 during configuration
    TIM2->CR1 &= ~CEN;
 8000298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a2:	f023 0301 	bic.w	r3, r3, #1
 80002a6:	6013      	str	r3, [r2, #0]

    // Set prescaler and auto-reload for 1 Hz toggle
    TIM2->PSC = 16000 - 1; // Prescaler
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002b0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000 - 1;  // Auto-reload
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Configure TIM2 Channel 1 in toggle mode
    TIM2->CCMR1 &= ~(7U << 4); // Clear OC1M bits
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80002ca:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (3U << 4);  // Set OC1M to toggle mode (0b011)
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002da:	6193      	str	r3, [r2, #24]

    // Enable TIM2 Channel 1 output
    TIM2->CCER |= CC1E;
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e0:	6a1b      	ldr	r3, [r3, #32]
 80002e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6213      	str	r3, [r2, #32]

    // Set initial compare value
    TIM2->CCR1 = 0;
 80002ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f0:	2200      	movs	r2, #0
 80002f2:	635a      	str	r2, [r3, #52]	@ 0x34

    // Enable TIM2 counter
    TIM2->CR1 |= CEN;
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	@ (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	@ (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	@ (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	@ (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	@ (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff67 	bl	8000218 <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	2000001c 	.word	0x2000001c

08000364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC1_2_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	@ (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	@ (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	@ (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	@ (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
