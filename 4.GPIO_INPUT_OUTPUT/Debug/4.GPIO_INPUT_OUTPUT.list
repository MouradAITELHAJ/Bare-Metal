
4.GPIO_INPUT_OUTPUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  08000394  00001394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00001394  2**0
                  CONTENTS
  4 .ARM          00000000  0800038c  0800038c  00001394  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800038c  08000394  00001394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000390  08000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00001394  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000388  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000f6  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00001848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000038  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136b4  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005ef  00000000  00000000  00014f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006fd57  00000000  00000000  0001557b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000852d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000098  00000000  00000000  00085318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000853b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000374 	.word	0x08000374

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08000374 	.word	0x08000374

08000218 <main>:
#include<stdint.h>




int main(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0


	GPIOA_CONFIG();
 800021c:	f000 f81c 	bl	8000258 <GPIOA_CONFIG>
	GPIOC_CONFIG();
 8000220:	f000 f842 	bl	80002a8 <GPIOC_CONFIG>

	while(1){
		if(GPIOC->IDR & PUSH_BUTTON){
 8000224:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <main+0x3c>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800022c:	2b00      	cmp	r3, #0
 800022e:	d008      	beq.n	8000242 <main+0x2a>
			GPIOA->ODR 	|=	LED;
 8000230:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	e7f0      	b.n	8000224 <main+0xc>
		}
		else
			GPIOA->ODR 	&=	~LED;
 8000242:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800024c:	f023 0320 	bic.w	r3, r3, #32
 8000250:	6153      	str	r3, [r2, #20]
		if(GPIOC->IDR & PUSH_BUTTON){
 8000252:	e7e7      	b.n	8000224 <main+0xc>
 8000254:	48000800 	.word	0x48000800

08000258 <GPIOA_CONFIG>:
	}
}
// GPIO Configuration

void GPIOA_CONFIG(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
//Enable clock for PIOA (GPIO linked to the AHB2 bus)
	RCC->AHB2ENR	|=	 GPIOAEN;
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <GPIOA_CONFIG+0x4c>)
 800025e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000260:	4a10      	ldr	r2, [pc, #64]	@ (80002a4 <GPIOA_CONFIG+0x4c>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// 01 means that the pin 5 is an output
	//Clear the bit 11 of MODE register
	GPIOA->MODER	&=	~(3U<<10);
 8000268:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000272:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000276:	6013      	str	r3, [r2, #0]
	//Set the bit 10 of MODE register
	GPIOA->MODER	|=	 (1U<<10);
 8000278:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000286:	6013      	str	r3, [r2, #0]
	//initialize the pin 5
	GPIOA->ODR		&=	 ~LED;
 8000288:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000292:	f023 0320 	bic.w	r3, r3, #32
 8000296:	6153      	str	r3, [r2, #20]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000

080002a8 <GPIOC_CONFIG>:
void GPIOC_CONFIG(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	RCC->AHB2ENR	|=	GPIOCEN;
 80002ac:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <GPIOC_CONFIG+0x28>)
 80002ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b0:	4a07      	ldr	r2, [pc, #28]	@ (80002d0 <GPIOC_CONFIG+0x28>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/*Clear bit 26 and 27
	 * 00 means that the pin selected is an output*/
	GPIOC->MODER	&=	~(3U<<13 * 2); // each bit n represented by 2n and 2n+1
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <GPIOC_CONFIG+0x2c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a05      	ldr	r2, [pc, #20]	@ (80002d4 <GPIOC_CONFIG+0x2c>)
 80002be:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002c2:	6013      	str	r3, [r2, #0]
	//Set pin 13 as output
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000
 80002d4:	48000800 	.word	0x48000800

080002d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d8:	480d      	ldr	r0, [pc, #52]	@ (8000310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	@ (8000314 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	@ (8000318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	@ (800031c <LoopForever+0xe>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000324 <LoopForever+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000306:	f000 f811 	bl	800032c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030a:	f7ff ff85 	bl	8000218 <main>

0800030e <LoopForever>:

LoopForever:
  b LoopForever
 800030e:	e7fe      	b.n	800030e <LoopForever>
  ldr   r0, =_estack
 8000310:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000318:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800031c:	08000394 	.word	0x08000394
  ldr r2, =_sbss
 8000320:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000324:	2000001c 	.word	0x2000001c

08000328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC1_2_IRQHandler>
	...

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	4d0d      	ldr	r5, [pc, #52]	@ (8000364 <__libc_init_array+0x38>)
 8000330:	4c0d      	ldr	r4, [pc, #52]	@ (8000368 <__libc_init_array+0x3c>)
 8000332:	1b64      	subs	r4, r4, r5
 8000334:	10a4      	asrs	r4, r4, #2
 8000336:	2600      	movs	r6, #0
 8000338:	42a6      	cmp	r6, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	4d0b      	ldr	r5, [pc, #44]	@ (800036c <__libc_init_array+0x40>)
 800033e:	4c0c      	ldr	r4, [pc, #48]	@ (8000370 <__libc_init_array+0x44>)
 8000340:	f000 f818 	bl	8000374 <_init>
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	10a4      	asrs	r4, r4, #2
 8000348:	2600      	movs	r6, #0
 800034a:	42a6      	cmp	r6, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f855 3b04 	ldr.w	r3, [r5], #4
 8000354:	4798      	blx	r3
 8000356:	3601      	adds	r6, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	4798      	blx	r3
 8000360:	3601      	adds	r6, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
